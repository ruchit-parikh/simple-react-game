{"version":3,"sources":["game/grid/node/index.js","game/grid/index.js","game/index.js","App.js","serviceWorker.js","index.js"],"names":["Node","className","this","props","character","Component","INPUTS","Grid","state","rows","columns","mashrooms","player","score","prompt","setState","spawnPlayer","parseInt","spawnMashrooms","i","mashroom","Math","random","includes","push","listenInputs","self","document","onkeyup","event","newPosX","newPosY","isPlayerMoved","keyCode","filter","value","length","alert","rowsHTML","columnsHTML","j","Game","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.16efc199.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport './index.css';\n\nexport default class Node extends Component {\n  render() {\n    return (\n      <div className={ 'cell ' + this.props.character }>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport Node from './node';\nimport './index.css';\n\n//possible keyboard input values\nconst INPUTS = {\n  LEFT: 37, \n  UP: 38, \n  RIGHT: 39,\n  DOWN: 40,\n  W: 87,\n  S: 83,\n  A: 65,\n  D: 68\n};\n\nexport default class Grid extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: 0,\n      columns: 0, \n      mashrooms: [], \n      player: 0,\n      score: 0\n    };\n  }\n\n  componentDidMount() {\n    const rows = prompt(\"Enter number of rows:\");\n    const columns = prompt(\"Enter number of columns:\");\n    this.setState({\n      rows: rows,\n      columns: columns\n    }, () => {\n      this.spawnPlayer();\n    });\n  }\n\n  //generate player in the center of grid\n  spawnPlayer() {\n    this.setState({\n      player: parseInt((this.state.rows - 1)/ 2)*this.state.columns + parseInt((this.state.columns - 1) / 2)\n    }, () => {\n      this.spawnMashrooms();\n    });\n  }\n  \n  //randomly generate mashrooms\n  spawnMashrooms() {\n    let i = 0, mashrooms = [];\n\n    while (i < this.state.rows) {\n      let mashroom = parseInt(Math.random()*this.state.rows*this.state.columns);\n      if (mashroom !== this.state.player && !mashrooms.includes(mashroom)) {\n        mashrooms.push(mashroom);\n        ++i;\n      }\n    }\n    this.setState({\n      mashrooms: mashrooms\n    }, () => {\n      this.listenInputs();\n    });\n  }\n\n  //listen for keyboard inputs\n  listenInputs() {\n    let self = this;\n    document.onkeyup = function(event) {\n      let newPosX, newPosY, isPlayerMoved = true;\n      switch(event.keyCode) {\n        case INPUTS.LEFT:\n        case INPUTS.A:\n          newPosX = (self.state.player % self.state.columns) - 1;\n          newPosY = parseInt(self.state.player / self.state.columns);\n          if (newPosX < 0) {\n            isPlayerMoved = false;\n            newPosX = 0;\n          }\n          self.setState({\n            player: (newPosY*self.state.columns) + newPosX\n          });\n          break;\n        \n        case INPUTS.UP:\n        case INPUTS.W:\n          newPosX = (self.state.player % self.state.columns);\n          newPosY = parseInt(self.state.player / self.state.columns) - 1;\n          if (newPosY < 0) {\n            isPlayerMoved = false;\n            newPosY = 0;\n          }\n          self.setState({\n            player: (newPosY*self.state.columns) + newPosX\n          });\n          break;\n\n        case INPUTS.RIGHT:\n        case INPUTS.D:\n          newPosX = (self.state.player % self.state.columns) + 1;\n          newPosY = parseInt(self.state.player / self.state.columns);\n          if (newPosX >= self.state.columns) {\n            isPlayerMoved = false;\n            newPosX = self.state.columns - 1;\n          }\n          self.setState({\n            player: (newPosY*self.state.columns) + newPosX\n          });\n          break;\n        \n        case INPUTS.DOWN:\n        case INPUTS.S:\n          newPosX = (self.state.player % self.state.columns);\n          newPosY = parseInt(self.state.player / self.state.columns) + 1;\n          if (newPosY >= self.state.rows) {\n            isPlayerMoved = false;\n            newPosY = self.state.rows - 1;\n          }\n          self.setState({\n            player: (newPosY*self.state.columns) + newPosX\n          });\n          break;\n\n        default:\n          break;\n      }\n      \n      //pick up mashroom\n      if (self.state.mashrooms.includes(self.state.player)) {\n        self.setState({\n          mashrooms: self.state.mashrooms.filter(function(value) {\n            if (value === self.state.player) {\n              return false;\n            }\n            return true;\n          })\n        });\n      }\n\n      //if player is not moved then dont increase steps\n      if (isPlayerMoved) {\n        self.setState({\n          score: self.state.score + 1\n        });\n      }\n\n      //finish game\n      if (self.state.mashrooms.length <= 0) {\n        alert('Total number of steps: ' + self.state.score);\n        self.spawnMashrooms();\n        self.spawnPlayer();\n        self.setState({\n          score: 0,\n        })\n      }\n    } \n  }\n\n  render() {\n    const rowsHTML = [];\n    for (let i = 0; i < this.state.rows; ++i) {\n      let columnsHTML = [];\n      for (let j = 0; j < this.state.columns; ++j) {\n        let character = 'none';\n        \n        if (this.state.player === (i*this.state.columns) + j) {\n          character = 'player';\n        } else if(this.state.mashrooms.includes(i*this.state.columns + j)) {\n          character = 'mashroom';\n        }\n\n        columnsHTML.push(\n          <Node character={character}>\n          </Node>\n        )\n      }\n\n      //push columns in each rows\n      rowsHTML.push(\n        <div className=\"row\">\n          { columnsHTML }\n        </div>\n      )\n    }\n    return (\n      <div className=\"grid\">\n        { rowsHTML }\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport Grid from './grid';\nimport './index.css';\n\nexport default class Game extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Grid></Grid>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport Game from './game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game></Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}